
stm32h750_mini_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000130  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  24000000  24000000  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  24000000  080003d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400001c  080003d0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e29  00000000  00000000  000103fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000788  00000000  00000000  00013227  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b0  00000000  00000000  000139b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000068  00000000  00000000  00013a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e63  00000000  00000000  00013ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000200d  00000000  00000000  0001792b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a0e9  00000000  00000000  00019938  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00023a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f8  00000000  00000000  00023a9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080003b0 	.word	0x080003b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	080003b0 	.word	0x080003b0

080002d8 <_Z6apInitv>:




void apInit(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  hwInit();
 80002dc:	f000 f835 	bl	800034a <hwInit>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <_Z6apMainv>:

void apMain(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  while(1)
 80002e8:	e7fe      	b.n	80002e8 <_Z6apMainv+0x4>

080002ea <bspInit>:




void bspInit(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f81f 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f000 f814 	bl	8000356 <main>

0800032e <LoopForever>:

LoopForever:
    b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000334:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000338:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 800033c:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 8000340:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000344:	2400001c 	.word	0x2400001c

08000348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC1_2_IRQHandler>

0800034a <hwInit>:




void hwInit(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	af00      	add	r7, sp, #0
  bspInit();
 800034e:	f7ff ffcc 	bl	80002ea <bspInit>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}

08000356 <main>:




int main(void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	af00      	add	r7, sp, #0
  apInit();
 800035a:	f7ff ffbd 	bl	80002d8 <_Z6apInitv>
  apMain();
 800035e:	f7ff ffc1 	bl	80002e4 <_Z6apMainv>

  return 0;
 8000362:	2300      	movs	r3, #0
}
 8000364:	4618      	mov	r0, r3
 8000366:	bd80      	pop	{r7, pc}

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4e0d      	ldr	r6, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1ba4      	subs	r4, r4, r6
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2500      	movs	r5, #0
 8000374:	42a5      	cmp	r5, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4e0b      	ldr	r6, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1ba4      	subs	r4, r4, r6
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2500      	movs	r5, #0
 8000386:	42a5      	cmp	r5, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000390:	4798      	blx	r3
 8000392:	3501      	adds	r5, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800039a:	4798      	blx	r3
 800039c:	3501      	adds	r5, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
